#+TITLE:  Backup via rsync
#+AUTHOR: Timo Lassmann
#+EMAIL:  timo.lassmann@telethonkids.org.au
#+DATE:   2018-10-04
#+LATEX_CLASS: report
#+OPTIONS:  toc:nil
#+OPTIONS: H:4
#+LATEX_CMD: xelatex

* Introduction
  Implementation of the rsync backup strategy discussed here: 
https://www.marksanborn.net/howto/use-rsync-for-daily-weekly-and-full-monthly-backups/

#+BEGIN_SRC sh :results none 
  mkdir rsync
  cd rsync 
  mkdir daily 
  mkdir weekly
  mkdir monthly

#+END_SRC

* Backup script
  :PROPERTIES: 
  :header-args: sh :exports both :results none :noweb yes :tangle ~/bin/backup_rsync.sh :shebang #!/bin/bash
  :END:      

  I want to have one script to execute daily, weekly, monthly
  backups. 

  #+BEGIN_SRC sh
    targets=($HOME/code $HOME/Dropbox/work $HOME/Dropbox/life $HOME/Dropbox/travel)


    backup_daily()
    {
        printf "Running rsync\n"
        printf "%30s\n" $1;
        for item in ${targets[*]}
        do
            printf "rsync-ing %s\n" $item;
            rsync -av --stats  --progress $item $HOME/rsync/daily 2>&1
            echo "rsync -av --progress $item $HOME/rsync/daily"
        done
        printf "Done\n"
    }

    backup_weekly()
    {
        printf "Running rsync\n"

        rsync -av --stats  --progress --delete $HOME/rsync/daily $HOME/rsync/weekly 2>&1

        printf "Done\n"
    }

    backup_monthly()
    {

        printf "Pwd: "
        read_secret PASSWD
        printf "again: "
        read_secret PASSWD2

        if [ "$PASSWD" != "$PASSWD2" ]
        then
            printf "\nERROR: passwords do not match!\n\n" ;
            exit 1;
        fi

        if [ "${PASSWD}" = "" ]; then usage; fi


        DATE=$(date +%Y%m%d)

        OUTFILENAME=$HOME"/rsync/monthly/monthly"$DATE".tar.gz"
        OGPG=$OUTFILENAME".gpg"


        if [ -f $OGPG ]
        then
            printf "\nERROR: the file %s exists!\n\n" $OGPG;
            usage;
        fi

        printf "Creating archive: \n";

        printf "%30s\n" $OUTFILENAME ;

        cd
        tar -czf $OUTFILENAME $HOME"/rsync/daily/"

        if [ "$?" -eq "0" ]
        then
            printf "%30s\n" "Success";
        else
            printf "\nERROR: tar FAILED!\n\n";

            usage;
        fi




        printf "Encrypting: \n";
        printf "%30s\n" $OGPG ;

        echo $PASSWD | gpg2 --batch --passphrase-fd 0 --symmetric --s2k-cipher-algo AES256 --s2k-mode 3 --s2k-count 65000000 -o $OGPG $OUTFILENAME

        if [ "$?" -eq "0" ]
        then
            printf "%30s\n" "Success";
        else
            printf "\nERROR: gpg FAILED!\n\n";
            usage;
        fi

        #
        # delete unencrypted tar archive...
        #

        rm $OUTFILENAME;

    }

    read_secret()
    {
        stty -echo
        trap 'stty echo' EXIT
        read "$@"
        stty echo
        trap - EXIT
        echo
    }




    INLIST=
    PASSWD=
    MODE=
    function usage()
    {
        cat <<EOF
usage: $0  -m <d/w/m>
EOF
        exit 1;
    }

    while getopts m: opt
    do
        case ${opt} in
            m) MODE=${OPTARG};;
            ,*) usage;;
        esac
    done

    if [ "${MODE}" = "" ]; then usage; fi

    #
    #   Sanity check
    #

    programs=(rsync scp tar sha512sum gpg2)

    printf "Running Sanity checks:\n";

    for item in ${programs[*]}
    do
        if which $item >/dev/null; then
            printf "%15s found...\n"  $item;
        else
            printf "\nERROR: %s not found!\n\n" $item;
            exit 1;
        fi
    done


    case "$MODE" in
        d)
            backup_daily $INLIST
            ;;
        w)
            backup_weekly
            ;;
        m)
            backup_monthly
            ;;
        ,*)
            echo $"Usage: $0 -m <d/w/m> -i <list of dirs to back up>"
            exit 1
    esac


  #+END_SRC

* Testing 


  #+BEGIN_SRC sh 
    targets=($HOME/code $HOME/work)

    test_function()
    {

        for item in ${targets[*]}
        do
        
            printf "rsync -a --progress  %s  $HOME/rsync/daily \n" $item
        done
    }
    test_function
  #+END_SRC

  #+RESULTS:
| rsync | -a | --progress | /home/user/code | /home/user/rsync/daily |
| rsync | -a | --progress | /home/user/work | /home/user/rsync/daily |

