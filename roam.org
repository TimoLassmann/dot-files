#+TITLE:  Org-roam configuration 
#+AUTHOR: Timo Lassmann
#+EMAIL:  timo.lassmann@telethonkids.org.au
#+DATE:   2020-08-19
#+LATEX_CLASS: report
#+OPTIONS:  toc:nil
#+OPTIONS: H:4
#+LATEX_CMD: pdflatex
* Introduction 

** General config 
  #+BEGIN_SRC emacs-lisp

(setq
   org_notes (concat (getenv "HOME") "/work/roam")   
   deft-directory org_notes
   org-roam-directory org_notes
   )
  #+END_SRC

  #+RESULTS:
  : /home/user/work/roam


#+BEGIN_SRC emacs-lisp
(executable-find "sqlite3")
(add-hook 'after-init-hook 'org-roam-mode)

#+END_SRC
  #+RESULTS:
  | org-roam-mode | global-flycheck-mode | x-wm-set-size-hint | table--make-cell-map |

#+RESULTS:
** hide-mode-line

#+BEGIN_SRC emacs-lisp
  (use-package hide-mode-line
  :ensure t
    :commands my/toggle-hide-mode-line
    :init
    (my/leader-keys
      "tm" 'my/toggle-hide-mode-line))

  ;;;###autoload
  (defun my/toggle-hide-mode-line ()
    (interactive)
    (hide-mode-line-mode (if hide-mode-line-mode -1 +1))
    (unless hide-mode-line-mode
      (redraw-display)))
#+END_SRC

#+RESULTS:
: my/toggle-hide-mode-line

** Deft
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :commands deft
    :ensure t
    :init
    (setq deft-default-extension "org"
          ;; de-couples filename and note title:
          deft-use-filename-as-title nil
          deft-use-filter-string-for-filename t
          ;; disable auto-save
          deft-auto-save-interval -1.0
          ;; converts the filter string into a readable file-name using kebab-case:
          deft-file-naming-rules
          '((noslash . "-")
            (nospace . "-")
            (case-fn . downcase)))
    :config
    (add-to-list 'deft-extensions "tex")
    )


#+END_SRC

#+RESULTS:

** helm-bibtex 

   #+BEGIN_SRC emacs-lisp
(setq
 bibtex-completion-notes-path "~/work/roam/"
 bibtex-completion-bibliography "~/work/bibliography/references.bib"
 bibtex-completion-pdf-field "file"
 bibtex-completion-notes-template-multiple-files
 (concat
  "#+TITLE: ${title}\n"
  "#+ROAM_KEY: cite:${=key=}\n"
  "* TODO Notes\n"
  ":PROPERTIES:\n"
  ":Custom_ID: ${=key=}\n"
  ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
  ":AUTHOR: ${author-abbrev}\n"
  ":JOURNAL: ${journaltitle}\n"
  ":DATE: ${date}\n"
  ":YEAR: ${year}\n"
  ":DOI: ${doi}\n"
  ":URL: ${url}\n"
  ":END:\n\n"
  )
 )
   
   #+END_SRC

   #+RESULTS:
   #+begin_example
   ,#+TITLE: ${title}
   ,#+ROAM_KEY: cite:${=key=}
   ,* TODO Notes
   :PROPERTIES:
   :Custom_ID: ${=key=}
   :NOTER_DOCUMENT: %(orb-process-file-field "${=key=}")
   :AUTHOR: ${author-abbrev}
   :JOURNAL: ${journaltitle}
   :DATE: ${date}
   :YEAR: ${year}
   :DOI: ${doi}
   :URL: ${url}
   :END:

   #+end_example

** vanilla org-roam 

#+BEGIN_SRC emacs-lisp
(use-package org-roam
      :ensure t
      :hook
      (after-init . org-roam-mode)
      :custom
   (org-roam-directory (concat (getenv "HOME") "/work/roam"))
      ;;(org-roam-directory "/path/to/org-files/")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-graph-show))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate))))

#+END_SRC





(use-package org-roam-bibtex
  :requires bibtex-completion
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :load-path "~/projects/org-roam-bibtex/"
  :bind (:map org-roam-bibtex-mode-map
         (("C-c m f" . orb-find-non-ref-file))
         :map org-mode-map
         (("C-c m t" . orb-insert-non-ref)
          ("C-c m a" . orb-note-actions)))
  :init
  :custom
  (orb-autokey-format "%a%y")
  (orb-templates
   `(("r" "ref" plain
      (function org-roam-capture--get-point)
      ""
      :file-name "refs/${citekey}"
      :head ,(s-join "\n"
                     (list
                      (concat "#+title: "
                              orb-title-format)
                      "#+roam_key: ${ref}"
                      "#+created: %U"
                      "#+last_modified: %U\n\n"))
      :unnarrowed t)
     ("p" "ref + physical" plain
      (function org-roam-capture--get-point)
      ""
      :file-name "refs/${citekey}"
      :head ,(s-join "\n"
                     (list
                      (concat "#+title: "
                              orb-title-format)
                      "#+roam_key: ${ref}"
                      ""
                      "* Notes :physical:")))
     ("n" "ref + noter" plain
      (function org-roam-capture--get-point)
      ""
      :file-name "refs/${citekey}"
      :head ,(s-join "\n"
                     (list
                      (concat "#+title: "
                              orb-title-format)
                      "#+roam_key: ${ref}"
                      ""
                      "* Notes :noter:"
                      ":PROPERTIES:"
                      ":NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")"
                      ":NOTER_PAGE:"
                      ":END:"))))))

(use-package org-roam-server
  :ensure t
  :bind (:map org-roam-mode-map
         (("C-c m G" . org-roam-server-mode)))
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))

: zp/org-roam-find-directory-testing




#+RESULTS:
: t




** 


#+RESULTS:
: t
