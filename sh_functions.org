#+TITLE:  Shell function to make my life easier
#+AUTHOR: Timo Lassmann
#+EMAIL:  timo.lassmann@telethonkids.org.au
#+DATE:   2018-01-28
#+LATEX_CLASS: report
#+OPTIONS:  toc:nil
#+OPTIONS: H:4
#+LATEX_CMD: xelatex

* Introduction 
  Set of functions to simplyfy my life

* Shell function 
  :PROPERTIES: 
  :header-args: sh :exports both :results none :noweb yes :tangle ~/.sh_functions.sh :shebang #!/bin/bash
  :END:      

** Proxy
  Set proxy automatically depending on hostname.. 
  
  #+BEGIN_SRC sh

    function set_custom_proxy() {
        export http_proxy='http://proxy.ichr.uwa.edu.au:8081'
        export https_proxy='https://proxy.ichr.uwa.edu.au:8081'
    }
    function unset_custom_proxy() {
        export http_proxy=
        export https_proxy=
    }

    function proxy() {
        OPTION=$1

        if [ -n "$OPTION" ];
        then
            case $OPTION in
                stop)
                    
                    echo "unsetting proxy!"
                    unset_custom_proxy
                    echo "Done."
                    ;;
                ,*)
                    echo "Sorry, I don't understand"
                    ;;
            esac
        else
            HOSTNAME=$(hostname)
            
            case $HOSTNAME in
                work)
                    echo "at work!"
                    set_custom_proxy
                    ;;
                SeqNextGen)
                    echo "at seqnextgen"
                    set_custom_proxy
                    ;;
                devel)
                    echo "at devel"
                    set_custom_proxy
                    ;;

                ,*)
                    echo "Sorry, hostname not recognized"
                    ;;
            esac        
            echo "Done."
        fi
    }

  #+END_SRC



** Clean tex
   
   #+BEGIN_SRC sh 

     function cleantex(){
         arg=${1:-.}
         exts=("aux" "fls" "bbl" "blg" "brf" "idx" "ilg" "ind" "lof" "log" "lol" "lot" "out" "toc" "synctex.gz" "run.xml" "fdb_latexmk")
         if [ -d $arg ]; then
             for ext in $exts; do
                 rm -f $arg/*.$ext
             done
         else
             for ext in $exts; do
                 rm -f $arg.$ext
             done
         fi
     }

   #+END_SRC
   

* Backup script 
  :PROPERTIES: 
  :header-args: sh :exports both :results none :noweb yes :tangle ~/bin/backup.sh :shebang #!/bin/bash
  :END:      
  

  Been using this for ages.
  
  #+BEGIN_SRC sh
    #!/usr/bin/env bash

    #
    # Set parameters below to fit your system
    #

    read_secret()
    {
        stty -echo
        trap 'stty echo' EXIT
        read "$@"
        stty echo
        trap - EXIT
        echo
    }




    INLIST=
    PASSWD=
    function usage()
    {
cat <<EOF
usage: $0  -i <input file list>
EOF
    exit 1;
    }

    while getopts i: opt
    do
    case ${opt} in
    i) INLIST=${OPTARG};;
    ,*) usage;;
    esac
    done

    if [ "${INLIST}" = "" ]; then usage; fi

    printf "Pwd: "
    read_secret PASSWD
    printf "again: " 
    read_secret PASSWD2

    if [ "$PASSWD" != "$PASSWD2" ]
    then
        printf "\nERROR: passwords do not match!\n\n" ;
        exit 1;
    fi

    if [ "${PASSWD}" = "" ]; then usage; fi

    #
    #   Sanity check 
    #

    programs=(scp tar sha512sum gpg2) 

    printf "Running Sanity checks:\n";

    for item in ${programs[*]}
    do   
        if which $item >/dev/null; then
      printf "%15s found...\n"  $item;
        else
      printf "\nERROR: %s not found!\n\n" $item;
      exit 1;
        fi
    done

    DATE=$(date +%d%m%y)

    OUTFILENAME=$HOME"/backup/archive"$DATE".tar.gz"

    OGPG=$OUTFILENAME".gpg"
    OSHA=$HOME"/backup/SHA256"


    if [ -f $OGPG ]
    then
        printf "\nERROR: the file %s exists!\n\n" $OGPG;
        usage;
    fi

    if [ ! -f $INLIST ]
    then
        printf "\nERROR: the file %s does not exist!\n\n" $INLIST;
        usage;
    fi


    printf "Creating archive: \n";

    printf "%30s\n" $OUTFILENAME ;

    cd
    tar -czf $OUTFILENAME --files-from $INLIST

    if [ "$?" -eq "0" ]
    then
        printf "%30s\n" "Success";
    else
        printf "\nERROR: tar FAILED!\n\n";
        
        usage;
    fi

        


    printf "Encrypting: \n";
    printf "%30s\n" $OGPG ;

    echo $PASSWD | gpg2 --batch --passphrase-fd 0 --symmetric --s2k-cipher-algo AES256 --s2k-mode 3 --s2k-count 65000000 -o $OGPG $OUTFILENAME

    if [ "$?" -eq "0" ]
    then
        printf "%30s\n" "Success";
    else
        printf "\nERROR: gpg FAILED!\n\n";
        usage;
    fi

    #
    # delete unencrypted tar archive... 
    #

    rm $OUTFILENAME;



    printf "sha512: \n";
    printf "%30s\n" $OSHA;

    TARGET=$HOME"/backup"

    cd $TARGET 

    sha512sum --tag  $OGPG >> $OSHA  
    if [ "$?" -eq "0" ]
    then
        printf "%30s\n" "Success";
    else
        printf "\nERROR: sha512sum FAILED!\n\n";
        usage;
    fi

    chmod 600 $OGPG 
    chmod 600 $OSHA


#+END_SRC


End. 
