#+TITLE:  A collection of slurm wrappers
#+AUTHOR: Timo Lassmann
#+EMAIL:  timo.lassmann@telethonkids.org.au
#+DATE:   2019-09-11
#+LATEX_CLASS: report
#+OPTIONS:  toc:nil
#+OPTIONS: H:4
#+LATEX_CMD: pdflatex
* Introduction 
  

** Basic skeleton script  
#+BEGIN_SRC bash -n :tangle test_wrapper.sh :shebang #!/usr/bin/env bash :noweb yes :exports code :results none

CPU=
MEM=
function usage()
{

    printf "usage: $0 -t <threads> -m <mem> input -o output\n\n" ;
    exit 1;
}

while getopts i:o:t:m:  opt
do
    case ${opt} in
        t) CPU=${OPTARG};;
        m) MEM=${OPTARG};;
        i) INPUT=${OPTARG};;
        o) OUTPUT=${OPTARG};;            
        *) usage;;
    esac
done
if [ "${CPU}" == "" ]; then usage; fi
if [ "${MEM}" == "" ]; then usage; fi


sbatch <<EOT
#!/usr/bin/env bash

#SBATCH --cpus-per-task=$CPU
#SBATCH --mem=$MEM
#SBATCH -t 0-10:00 # time (D-HH:MM)
#SBATCH -o slurm.%N.%j.out # STDOUT
#SBATCH -e slurm.%N.%j.err # STDERR

hostname

exit 0
EOT
#+END_SRC

** testing R 

#+BEGIN_SRC bash -n :tangle test_R_script.R :shebang #!/usr/bin/env R :noweb yes :exports code :results none
  sessionInfo()
#+END_SRC

#+BEGIN_SRC bash -n :tangle test_wrapper_R.sh :shebang #!/usr/bin/env bash :noweb yes :exports code :results none

CPU=
MEM=
function usage()
{

    printf "usage: $0 -t <threads> -m <mem> input -o output\n\n" ;
    exit 1;
}

while getopts i:o:t:m:  opt
do
    case ${opt} in
        t) CPU=${OPTARG};;
        m) MEM=${OPTARG};;
        i) INPUT=${OPTARG};;
        o) OUTPUT=${OPTARG};;            
        *) usage;;
    esac
done
if [ "${CPU}" == "" ]; then usage; fi
if [ "${MEM}" == "" ]; then usage; fi


sbatch <<EOT
#!/usr/bin/env bash

#SBATCH --cpus-per-task=$CPU
#SBATCH --mem=$MEM
#SBATCH -t 0-10:00 # time (D-HH:MM)
#SBATCH -o slurm.%N.%j.out # STDOUT
#SBATCH -e slurm.%N.%j.err # STDERR

./test_R_script.R

exit 0
EOT
#+END_SRC




** cellranger 

#+BEGIN_SRC bash -n :tangle slurm_cellranger_count.sh :shebang #!/usr/bin/env bash :noweb yes :exports code :results none
export PATH=/home/timo/program/cellranger-3.1.0:$PATH
CPU=16
MEM=128
REF=
FASTQ= 
EXPECTED=6000
SAMPLE=
NAME=
function usage()
{

    printf "usage: $0 -t <threads> -m <mem> -r <reference> -f <fastqdir> -e <expected cells>  -s <sample> -n <name of output> \n\n" ;
    exit 1;
}

while getopts t:m:r:f:e:s:n:  opt
do
    case ${opt} in
        t) CPU=${OPTARG};;
        m) MEM=${OPTARG};;
        r) REF=${OPTARG};;
        f) FASTQ=${OPTARG};;
        e) EXPECTED=${OPTARG};;
        s) SAMPLE=${OPTARG};;
        n) NAME=${OPTARG};;
        *) usage;;
    esac
done
if [ "${CPU}" == "" ]; then usage; fi
if [ "${MEM}" == "" ]; then usage; fi
if [ "${REF}" == "" ]; then usage; fi
if [ "${FASTQ}" == "" ]; then usage; fi
if [ "${SAMPLE}" == "" ]; then usage; fi
if [ "${NAME}" == "" ]; then usage; fi

SLURMMEM=$MEM"G"

sbatch <<EOT
#!/usr/bin/env bash

#SBATCH --cpus-per-task=$CPU
#SBATCH --mem=$SLURMMEM
#SBATCH -t 10-12:30 # time (D-HH:MM)
#SBATCH -o slurm.%N.%j.out # STDOUT
#SBATCH -e slurm.%N.%j.err # STDERR


cellranger count --id=$NAME --transcriptome=$REF --fastqs=$FASTQ --sample=$SAMPLE --expect-cells=$EXPECTED --localcores=$CPU --localmem=$MEM
exit 0
EOT
#+END_SRC

