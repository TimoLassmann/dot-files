#+TITLE:  My emacs config
#+AUTHOR: Timo Lassmann
#+DATE:   2021-04-17
#+STARTUP: overview
#+LATEX_CLASS: report
#+OPTIONS:  toc:nil
#+OPTIONS: H:4
#+LATEX_CMD: pdflatex
#+PROPERTY: header-args:emacs-lisp :exports code
* Introduction

All my emacs config.
* Basic settings
** Bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
;; (setq visible-bell nil)
#+END_SRC

#+RESULTS:
: ignore

** Get rid of custom-set stuff

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'cus-edit
  ;; Disable the damn thing
  (setq custom-file (make-temp-file "emacs-custom-")))

#+END_SRC

#+RESULTS:
: /tmp/emacs-custom-hNWidf

** Directory paths

#+BEGIN_SRC emacs-lisp
(defconst tl/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))
(defun tl/emacs-subdirectory (d) (expand-file-name d tl/emacs-directory))
#+END_SRC

** Whoami

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Timo Lassmann"
      user-mail-address "timo.lassmann@telethonkids.org.au")
#+END_SRC

** Settings
#+BEGIN_SRC emacs-lisp

(defalias 'yes-or-no-p 'y-or-n-p)

(setq ring-bell-function 'ignore)

(setq-default cursor-type 'box)
(setq-default cursor-in-non-selected-windows '(bar . 2))
(setq-default blink-cursor-blinks 50)
(setq-default blink-cursor-interval nil) ; 0.75 would be my choice
(setq-default blink-cursor-delay 0.2)

(blink-cursor-mode -1)

#+END_SRC

#+RESULTS:

** Bidirectional writing and so-long.el
(from prot)
#+BEGIN_SRC emacs-lisp

(setq-default bidi-paragraph-direction 'left-to-right)
(setq bidi-inhibit-bpa t)
(require 'so-long)
(global-so-long-mode 1)
#+END_SRC

** No easy keys


#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'no-easy-keys
  (no-easy-keys 1)
  )
#+END_SRC

#+RESULTS:
: t

** Kill buffer
Assume that I always want to kill the current buffer when hitting C-x k.
#+BEGIN_SRC emacs-lisp
(defun tl/kill-current-buffer ()
  "Kill the current buffer without prompting."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'tl/kill-current-buffer)
#+END_SRC

** Turn off some default key-bindings
I keep hitting this by accidental
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x C-z"))
(global-unset-key (kbd "C-h h"))
(global-unset-key (kbd "C-x C-c"))


(defun tl/quit-emacs ()
  "Kill the current buffer without prompting."
  (interactive)
  (save-buffers-kill-terminal))

#+END_SRC

** Global key bindings
Nothing .

** Tabs vs spaces

Never use tabs. Tabs are the devilâ€™s whitespace.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)

;; (setq-default tab-always-indent 'complete)
#+END_SRC

#+RESULTS:

** Common functions

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'tl-common
  (global-set-key [remap move-beginning-of-line] 'smarter-move-beginning-of-line)
  (global-set-key [remap org-beginning-of-line]  'smarter-move-beginning-of-line)


  (define-key global-map (kbd "C-x 3") #'split-and-follow-vertically)
  (define-key global-map (kbd "C-x 2") #'split-and-follow-horizontally)
  )
#+END_SRC

* Main looks
** My simple theme

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'simple-theme
  (simple-theme-load-theme)
  )
#+END_SRC

#+RESULTS:
: t

** Fonts

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'tl-fonts
  (tl/setup-fonts)
  )
#+END_SRC

#+RESULTS:

** Modeline

#+BEGIN_SRC emacs-lisp
(setq mode-line-percent-position '(-3 "%p"))
(setq mode-line-position-column-line-format '(" %l,%c")) ; Emacs 28
(setq mode-line-defining-kbd-macro
      (propertize " Macro" 'face 'mode-line-emphasis))

;; Thanks to Daniel Mendler for this!  It removes the square brackets
;; that denote recursive edits in the modeline.  I do not need them
;; because I am using Daniel's `recursion-indicator':
;; <https://github.com/minad/recursion-indicator>.
(setq-default mode-line-modes
              (seq-filter (lambda (s)
                            (not (and (stringp s)
                                      (string-match-p
                                       "^\\(%\\[\\|%\\]\\)$" s))))
                          mode-line-modes))

(setq mode-line-compact nil)            ; Emacs 28
(setq-default mode-line-format
              '("%e"
                mode-line-front-space
                mode-line-mule-info
                mode-line-client
                mode-line-modified
                mode-line-remote
                mode-line-frame-identification
                mode-line-buffer-identification
                "  "
                mode-line-position
                mode-line-modes
                "  "
                (vc-mode vc-mode)
                "  "
                mode-line-misc-info
                mode-line-end-spaces))
#+END_SRC

#+RESULTS:
| %e | mode-line-front-space | mode-line-mule-info | mode-line-client | mode-line-modified | mode-line-remote | mode-line-frame-identification | mode-line-buffer-identification |   | mode-line-position | mode-line-modes |   | (vc-mode vc-mode) |   | mode-line-misc-info | mode-line-end-spaces |

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'minions
  (setq minions-mode-line-lighter ";")
  ;; NOTE: This will be expanded whenever I find a mode that should not
  ;; be hidden
  (setq minions-direct (list 'defining-kbd-macro
                             'flymake-mode
                             'flycheck-mode
                             ))
  (minions-mode 1))

#+END_SRC

#+RESULTS:
: t

** Window placement
#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'window
  (setq display-buffer-alist
        '(
          ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\)\\*"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . 2)
           (window-parameters . ((no-other-window . t))))
          ;; bottom side window
          ("\\*\\(Embark\\)?.*Completions.*"
           (display-buffer-in-side-window)
           (side . bottom)
           (slot . 0)
           (window-parameters . ((no-other-window . t)
                                 (mode-line-format . none))))
          ;; left side window
          ("\\*Help.*"
           (display-buffer-in-side-window)
           (window-width . 0.20)       ; See the :hook
           (side . left)
           (slot . 0))
          ("\\*Embark\\ Collect.*"
           (display-buffer-in-side-window)
           (window-width . 0.15)       ; See the :hook
           (side . left)
           (slot . 0))
          ;; right side window
          ("\\*compilation.*"
           (display-buffer-in-side-window)
           (window-width . 0.40)       ; See the :hook
           (side . right)
           (slot . 0))

          ("\\*eshell.*"
           (display-buffer-in-side-window)
           (window-width . 0.40)       ; See the :hook
           (side . right)
           (slot . 2))
          ))
  )

#+END_SRC

** Help mode hooks

#+BEGIN_SRC emacs-lisp
(add-hook 'help-mode-hook #'visual-line-mode)
#+END_SRC

#+RESULTS:
| visual-line-mode |

* Convenience
** Undo Tree
#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'undo-tree
  (global-undo-tree-mode 1))

#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'which-key
  ;; ;; NOTE: I only use this for `embark' and `consult' and for the sake
  ;; ;; of producing more user-friendly video demonstrations.
  (setq which-key-dont-use-unicode t)
  (setq which-key-add-column-padding 2)

  ;; (setq which-key-setup-side-window-bottom)
  (setq which-key-show-early-on-C-h t)
  (setq which-key-idle-delay 1.0)
  (setq which-key-idle-secondary-delay 0.05)
  ;; (which-key-setup-minibuffer)
  (setq which-key-popup-type 'side-window)
  (which-key-setup-side-window-bottom)
  (setq which-key-show-prefix 'echo)
  (setq which-key-max-display-columns 3)
  (setq which-key-separator "  ")
  (setq which-key-special-keys nil)
  (setq which-key-paging-key "<next>")
  (which-key-mode))     ; and turn this on, if you want to use this
#+END_SRC

#+RESULTS:
: t

** saveplace

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'saveplace
  (save-place-mode))
#+END_SRC

** recentf
#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'recentf
  (setq recentf-save-file "~/.emacs.d/recentf")
  (setq recentf-max-menu-items 10)
  (setq recentf-max-saved-items 200)
  (setq recentf-show-file-shortcuts-flag nil)
  (add-to-list 'recentf-exclude
               (expand-file-name "~/.emacs.d/company-statistics-cache.el"))
  (recentf-mode 1)
  )
#+END_SRC

** Async

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'async)

#+END_SRC

#+RESULTS:

** Rainbow

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'rainbow-mode
  )
#+END_SRC

* Moving
** Switch windows


#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'switch-window
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 4)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  (global-set-key [remap other-window]  'switch-window))

#+END_SRC

** Beginend

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'beginend
  (beginend-global-mode 1))

#+END_SRC

** Goto last Change

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'goto-last-change
  (define-key global-map (kbd "C-z") #'goto-last-change))
#+END_SRC

** Avy

#+BEGIN_SRC emacs-lisp

(prot-emacs-elpa-package 'avy
  (global-set-key (kbd "M-SPC") 'avy-goto-char-timer)
  (global-set-key (kbd "C-:") 'avy-goto-char)
  (global-set-key (kbd "C-'") 'avy-goto-char-2)
  (global-set-key (kbd "M-g f") 'avy-goto-line)
  (global-set-key (kbd "M-g w") 'avy-goto-word-1)
  (global-set-key (kbd "M-g e") 'avy-goto-word-0))


#+END_SRC

** Beacon
#+BEGIN_SRC emacs-lisp

(prot-emacs-elpa-package 'beacon
  (setq beacon-push-mark 10)
  (setq beacon-blink-delay 0.3)
  (setq beacon-blink-duration 0.3)
  (beacon-mode)
  (global-hl-line-mode 1))
#+END_SRC

#+RESULTS:
: t

* Completion
** Company

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'company
  (setq company-auto-complete nil)
  (setq company-dabbrev-code-everywhere t)
  (setq company-dabbrev-code-modes t)
  (setq company-dabbrev-code-other-buffers 'all)
  (setq company-dabbrev-downcase nil)

  (setq company-dabbrev-ignore-case nil)
  (setq company-dabbrev-other-buffers 'all)
  (setq company-idle-delay 0.3)
  (setq company-minimum-prefix-length 3)
  (setq company-require-match nil)
  (setq company-selection-wrap-around t)
  (setq company-show-numbers t)
  (setq company-tooltip-align-annotations t)
  (setq company-tooltip-limit 10)
  (setq company-tooltip-margin 1)
  (setq company-tooltip-offset-display 'scrollbar)
  (add-to-list 'company-backends '(company-files
                                   company-clang
                                   company-capf
                                   company-dabbrev
                                   company-c-headers
                                   company-gtags))
  (let ((map company-mode-map))
    (define-key map (kbd "M-/") #'company-manual-begin))
  (let ((map company-active-map))
    (define-key map (kbd "M-/") #'company-other-backend)
    (define-key map (kbd "<tab>") #'company-complete-selection)
    (define-key map (kbd "<C-tab>") #'company-complete-common-or-cycle)
    (define-key map (kbd "C-n") #'company-select-next)
    (define-key map (kbd "C-p") #'company-select-previous))

  ;; (setq company-global-modes '(
  ;;                              org-mode
  ;;                              c-mode
  ;;                              eshell-mode
  ;;                              ))
  (global-company-mode 1)
  )
#+END_SRC

#+RESULTS:
: t

Company C headers

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'company-c-headers
  )
#+END_SRC

#+RESULTS:

Company Statistics
#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'company-statistics
  (company-statistics-mode)
  )
#+END_SRC

#+RESULTS:
: t

I had to add the hook and local variable to stop company from selecting capf before clang.
To make this work properly, I need to manually specify the include paths by
putting a =.dir-locals.el= into the source directory of my C code. I.e. most
of the time this will be =src= and I need to point to
=../tldevel=.

In addition add the include path to flycheck-clang!

#+BEGIN_EXAMPLE emacs-lisp
(
(c-mode . ((company
-clang-arguments . ("-I."  "-I../tldevel-1.2.8/"))))
(c-mode . ((company-c-headers-path-user . ("." "../tldevel-1.2.8/"))))
(c-mode . ((flycheck-clang-include-path . ("-I." "-I../tldevel-1.2.8/"))))
)
#+END_EXAMPLE

** Consult

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'consult
  (setq consult-line-numbers-widen t)

  (setq consult-ripgrep-command "rg -SHn --no-heading --color never --no-follow --hidden %s")
  (define-key global-map (kbd "M-s r") #'consult-git-grep)
  (define-key global-map (kbd "C-x b") #'consult-buffer)
  (define-key global-map (kbd "C-s") #'consult-line)
  (define-key global-map (kbd "C-x i") #'consult-imenu)
  (define-key global-map (kbd "C-x C-r") #'consult-recent-file)
  (define-key global-map (kbd "M-g M-g") #'consult-goto-line)
  ;; (define-key global-map (kbd "C-y") #'consult-yank)
  ;; (setq consult-widen-key t)
  (setq consult-config #'((consult-buffer :title nil)))
  )
#+END_SRC

Let's also look at consult-flycheck

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'consult-flycheck
  )
#+END_SRC

#+RESULTS:

** Orderless
#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'tl-orderless
  (setq prot-orderless-default-styles
        '(orderless-prefixes
          orderless-strict-leading-initialism
          orderless-regexp))
  (setq prot-orderless-alternative-styles
        '(orderless-literal
          orderless-prefixes
          orderless-strict-leading-initialism
          orderless-regexp)))

(prot-emacs-elpa-package 'orderless
  (setq orderless-component-separator " +")
  (setq orderless-matching-styles prot-orderless-default-styles)
  (setq orderless-style-dispatchers
        '(prot-orderless-literal-dispatcher
          prot-orderless-initialism-dispatcher
          prot-orderless-flex-dispatcher))
  ;; SPC should never complete: use it for `orderless' groups.
  (let ((map minibuffer-local-completion-map))
    (define-key map (kbd "SPC") nil)
    (define-key map (kbd "?") nil)))

;; (prot-emacs-elpa-package 'orderless
;;   (setq completion-styles '(orderless))
;;   (setq orderless-component-separator 'orderless-escapable-split-on-space))
#+END_SRC

#+RESULTS:

** Marginalia
#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'marginalia
  (setq marginalia-annotators
        '(marginalia-annotators-heavy
          marginalia-annotators-light))
  (let ((map minibuffer-local-map))
    (define-key map (kbd "M-Y") #'marginalia-cycle))
  (marginalia-mode))
#+END_SRC

** Minibuffer settings

#+BEGIN_SRC emacs-lisp

(setq completion-styles '(orderless partial-completion))

(setq completion-category-overrides
      '((buffer (styles . (substring flex orderless)))
        '(file (styles . (partial-completion orderless)))))

(file-name-shadow-mode 1)
(minibuffer-depth-indicate-mode 1)
(minibuffer-electric-default-mode 1)
(defun prot-minibuffer--field-beg ()
  "Determine beginning of completion."
  (if (window-minibuffer-p)
      (minibuffer-prompt-end)
    (nth 0 completion-in-region--data)))
(defun prot-minibuffer--completion-category ()
  "Return completion category."
  (let* ((beg (prot-minibuffer--field-beg))
         (md (completion--field-metadata beg)))
    (alist-get 'category (cdr md))))
(defun prot-minibuffer-backward-updir ()
  "Delete char before point or go up a directory.
Must be bound to `minibuffer-local-filename-completion-map'."
  (interactive)
  (if (and (eq (char-before) ?/)
           (eq (prot-minibuffer--completion-category) 'file))
      (save-excursion
        (goto-char (1- (point)))
        (when (search-backward "/" (point-min) t)
          (delete-region (1+ (point)) (point-max))))
    (call-interactively 'backward-delete-char)))
(let ((map minibuffer-local-filename-completion-map))
  (define-key map (kbd "<M-backspace>") #'prot-minibuffer-backward-updir))
#+END_SRC

#+RESULTS:
: prot-minibuffer-backward-updir

** Selectrum
#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'selectrum
  ;; (defvar me/selectrum-candidates-map (make-sparse-keymap))
  ;; :bind
  ;; (("C-x C-z" . selectrum-repeat)
  ;;  :map me/selectrum-candidates-map
  ;;  ("q" . abort-recursive-edit)
  ;;  ([remap keyboard-quit] . abort-recursive-edit))

  ;; setq orderless-skip-highlighting (lambda () selectrum-is-active))
  ;; (setq selectrum-highlight-candidates-function #'orderless-highlight-matches)
  ;; (add-hook 'selectrum-display-action #'(lambda () (use-local-map me/selectrum-candidates-map)))

  ;; (setq selectrum-display-action #'(display-buffer-at-bottom
  ;;                             (window-parameters (mode-line-format . none))))
  (setq selectrum-extend-current-candidate-highlight t)
  (setq selectrum-fix-vertical-window-height t)
  (setq selectrum-max-window-height .15)

  (let ((map minibuffer-local-filename-completion-map))
    (define-key map (kbd "<backspace>") #'selectrum-backward-kill-sexp))

  (selectrum-mode +1)
  )


#+END_SRC

#+RESULTS:
: t

** Embark

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'embark
  (setq embark-collect-initial-view-alist
        '((file . list)
          (buffer . list)
          (symbol . list)
          (line . list)
          (xref-location . list)
          (kill-ring . zebra)
          (t . list)))
  (setq embark-quit-after-action t)     ; XXX: Read the doc string!
  (setq embark-collect-live-update-delay 0.5)
  (setq embark-collect-live-initial-delay 0.8)

  (define-key global-map (kbd "C-,") #'embark-act)
  (let ((map minibuffer-local-map))
    (define-key map (kbd "C-,") #'embark-act))


  (let ((map minibuffer-local-completion-map))
    (define-key map (kbd "C-,") #'embark-act)
    (define-key map (kbd "C->") #'embark-become))

  (setq embark-action-indicator
        (lambda (map &optional _target)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator)
  (defun shrink-selectrum ()
    (when (eq embark-collect--kind :live)
      (with-selected-window (active-minibuffer-window)
        (setq-local selectrum-num-candidates-displayed 1)
        (setq-local selectrum-display-style
                    '(horizontal :before-candidates "[" :after-candidates "]"
                                 :more-candidates "" :candidates-separator "")))))

  (add-hook 'embark-collect-mode-hook #'shrink-selectrum)
  (add-hook 'embark-collect-post-revert-hook
            (defun resize-embark-collect-window (&rest _)
              (when (memq embark-collect--kind '(:live :completions))
                (fit-window-to-buffer (get-buffer-window)
                                      (floor (frame-height) 2) 1))))


  (setq prefix-help-command #'embark-prefix-help-command)
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

#+END_SRC


#+RESULTS:
| \`\*Embark Collect \(Live\ | Completions\)\* | nil | (window-parameters (mode-line-format . none)) |

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-,") #'embark-act)
#+END_SRC

#+RESULTS:
: embark-act

** Icomplete

#+BEGIN_SRC emacs-lisp
;; (prot-emacs-builtin-package 'icomplete
;;   (setq read-file-name-completion-ignore-case t)
;;   (setq read-buffer-completion-ignore-case t)
;;   (setq completion-ignore-case t)
;;   (let ((map icomplete-minibuffer-map))
;;     (define-key map (kbd "<return>") #'icomplete-force-complete-and-exit)
;;     (define-key map (kbd "<down>") #'icomplete-forward-completions)
;;     (define-key map (kbd "C-n") #'icomplete-forward-completions)
;;     (define-key map (kbd "<up>") #'icomplete-backward-completions)
;;     (define-key map (kbd "C-p") #'icomplete-backward-completions)
;;     (define-key map (kbd "C-v") #'icomplete-vertical-toggle)
;;     (define-key map (kbd "C-M-i") #'minibuffer-complete))
;;   (icomplete-mode))
#+END_SRC

#+RESULTS:
: t

** Icomplete vertical

#+BEGIN_SRC emacs-lisp

;; (prot-emacs-elpa-package 'icomplete-vertical
;;   (icomplete-vertical-mode)
;;   )

#+END_SRC

** Dabbrev

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'dabbrev
  (setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
  (setq dabbrev-abbrev-skip-leading-regexp "[$*/=~']")
  (setq dabbrev-backward-only nil)
  (setq dabbrev-case-distinction 'case-replace)
  (setq dabbrev-case-fold-search nil)
  (setq dabbrev-case-replace 'case-replace)
  (setq dabbrev-check-other-buffers t)
  (setq dabbrev-eliminate-newlines t)
  (setq dabbrev-upcase-means-case-search t)
  (let ((map global-map))
    (define-key map (kbd "M-/") #'dabbrev-expand)
    (define-key map (kbd "s-/") #'dabbrev-completion)))


#+END_SRC

#+RESULTS:
: dabbrev-completion

** Autoinsert templates

#+begin_src emacs-lisp
(defun ha/autoinsert-yas-expand()
  "Replace text in yasnippet template."
  (yas-expand-snippet (buffer-string) (point-min) (point-max)))
(prot-emacs-builtin-package 'autoinsert

  (setq auto-insert-directory (tl/emacs-subdirectory "templates/"))
  ;; Don't want to be prompted before insertion:
  (setq auto-insert-query nil)

  (add-hook 'find-file-hook 'auto-insert)
  (auto-insert-mode 1)

  (define-auto-insert ".+work\/Project.+org$" ["default-orgmode.org"  ha/autoinsert-yas-expand])
  (define-auto-insert ".+work\/docs.+org$" ["default-orgmode.org"  ha/autoinsert-yas-expand])
  (define-auto-insert ".+code.+org$" ["default-orgmode.org"  ha/autoinsert-yas-expand])
  (auto-insert-mode 1)
  )
#+end_src

#+RESULTS:
: t

* Programming
Mostly C ...

** Compilation
Some default settings.

#+BEGIN_SRC emacs-lisp
;; (setq-default tab-width 4)
(global-subword-mode 1)
(setq compile-command "make -j 6")
(setq compilation-scroll-output 'first-error)
(setq compilation-always-kill t)
(setq compilation-disable-input t)
(setq compilation-scroll-output t)
(setq compilation-read-command nil)
(add-hook 'compilation-mode-hook 'visual-line-mode)

(global-set-key (kbd "<f5>") (lambda ()
                               (interactive)
                               (setq-local compilation-read-command nil)
                               (call-interactively 'compile)))

#+END_SRC

#+RESULTS:
| (lambda nil (add-hook 'before-save-hook 'whitespace-cleanup)) | smartparens-mode | my-c-mode-hook | (lambda nil (set (make-local-variable 'company-backends) '(company-clang company-gtags company-c-headers company-dabbrev))) |

Highlight line mode

#+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'flycheck
  (add-hook 'after-init-hook 'global-flycheck-mode)
  ;; (add-hook 'c-mode-hook (lambda () (setq flycheck-clang-language-standard "c11")))
  )
(prot-emacs-elpa-package 'flycheck-clang-analyzer
  (flycheck-clang-analyzer-setup)
  )

(prot-emacs-elpa-package 'flycheck-clang-tidy
  (setq-default flycheck-clang-tidy-extra-options "--checks=-*,bugprone-*,cert-*,clang-analyzer-*,darwin-*,linuxkernel-*,misc-*,performance-*,portability-*,readability-*,-readability-magic-numbers")
  (flycheck-clang-tidy-setup)
  )
#+END_SRC

#+RESULTS:
| c/c++-clang-tidy | ada-gnat | asciidoctor | asciidoc | awk-gawk | bazel-buildifier | c/c++-clang | c/c++-gcc | c/c++-cppcheck | cfengine | chef-foodcritic | coffee | coffee-coffeelint | coq | css-csslint | css-stylelint | cuda-nvcc | cwl | d-dmd | dockerfile-hadolint | elixir-credo | emacs-lisp | emacs-lisp-checkdoc | ember-template | erlang-rebar3 | erlang | eruby-erubis | eruby-ruumba | fortran-gfortran | go-gofmt | go-golint | go-vet | go-build | go-test | go-errcheck | go-unconvert | go-staticcheck | groovy | haml | handlebars | haskell-stack-ghc | haskell-ghc | haskell-hlint | html-tidy | javascript-eslint | javascript-jshint | javascript-standard | json-jsonlint | json-python-json | json-jq | jsonnet | less | less-stylelint | llvm-llc | lua-luacheck | lua | markdown-markdownlint-cli | markdown-mdl | nix | nix-linter | opam | perl | perl-perlcritic | php | php-phpmd | php-phpcs | processing | proselint | protobuf-protoc | protobuf-prototool | pug | puppet-parser | puppet-lint | python-flake8 | python-pylint | python-pycompile | python-pyright | python-mypy | r-lintr | racket | rpm-rpmlint | rst-sphinx | rst | ruby-rubocop | ruby-standard | ruby-reek | ruby-rubylint | ruby | ruby-jruby | rust-cargo | rust | rust-clippy | scala | scala-scalastyle | scheme-chicken | scss-lint | scss-stylelint | sass/scss-sass-lint | sass | scss | sh-bash | sh-posix-dash | sh-posix-bash | sh-zsh | sh-shellcheck | slim | slim-lint | sql-sqlint | systemd-analyze | tcl-nagelfar | terraform | terraform-tflint | tex-chktex | tex-lacheck | texinfo | textlint | typescript-tslint | verilog-verilator | vhdl-ghdl | xml-xmlstarlet | xml-xmllint | yaml-jsyaml | yaml-ruby | yaml-yamllint | clang-analyzer |

** Indent

*** aindent mode
#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'clean-aindent-mode
  (add-hook 'prog-mode-hook 'clean-aindent-mode))
#+END_SRC

*** DTRT indent

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'dtrt-indent
  (add-hook 'prog-mode-hook 'dtrt-indent-mode)
  (dtrt-indent-mode 1)
  (setq dtrt-indent-verbosity 0)
  )
#+END_SRC

#+RESULTS:
: 0

** Yasnippet

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'yasnippet
  (add-to-list 'yas-snippet-dirs (tl/emacs-subdirectory "snippets"))
  (yas-reload-all)
  (yas-global-mode 1))
#+END_SRC

** Smart comments


#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'smart-comment
  (define-key global-map (kbd "M-;") #'smart-comment))

#+END_SRC

** Smart parens

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'smartparens

  (add-hook 'c-mode-hook 'smartparens-mode)
  (add-hook 'org-mode-hook 'smartparens-mode)
  )
#+END_SRC

#+RESULTS:
| flymake-proselint-setup | org-ref-org-menu | (lambda nil (org-superstar-mode 1)) | flyspell-mode | visual-line-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | smartparens-mode | beginend-org-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-ref-setup-label-finders |

** Smart scan

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'smartscan
  (define-key global-map (kbd "M-n") #'smartscan-symbol-go-forward)
  (define-key global-map (kbd "M-p") #'smartscan-symbol-go-backward))
#+END_SRC

** GGtags

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'ggtags

  ;; (setq ggtags-oversize-limit 104857600)
  ;; (setq ggtags-sort-by-nearness t)
  ;; ;; ;; (setq ggtags-use-idutils t)
  ;; (setq ggtags-use-project-gtagsconf nil)
  ;; (setq  ggtags-global-use-color nil)
  ;; (setq ggtags-highlight-tag 10)
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode)
                (ggtags-mode 1))))
  (let ((map ggtags-navigation-map))
    (define-key map (kbd "M-u") #'ggtags-navigation-previous-file)
    (define-key map (kbd "M-o") #'ggtags-navigation-next-file)
    (define-key map (kbd "M-l") #'ggtags-navigation-visible-mode)
    (define-key map (kbd "M-j") #'ggtags-navigation-visible-mode)
    (define-key map (kbd "M-k") #'next-error)
    (define-key map (kbd "M-i") #'previous-error)))

;; (define-key global-map (kbd "M-;") #'smart-comment))

#+END_SRC

#+RESULTS:
: previous-error

** Whitespace

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'whitespace
  (define-key global-map (kbd "C-c w") #'whitespace-mode)
  ;; (add-hook 'c-mode-hook
  ;;           (lambda () (add-hook 'before-save-hook 'whitespace-cleanup)))
  )
#+END_SRC

** My C config

When switching to emacs my indent etc.. setup broke for some reason.
Therefore I decided to put all of my c-mode settings in one file.

#+BEGIN_SRC emacs-lisp

(prot-emacs-builtin-package 'tl-cmode
  ;; (defun my-c-initialization-hook ()
  ;;   (smartparens-mode 1)
  ;;   (hl-line-mode 1)
  ;;   (clean-aindent-mode 1)
  ;;   (dtrt-indent-mode 1)

  ;;   (org-indent-mode -1)
  ;;   (org-roam-mode -1))

  ;; (add-hook 'c-initialization-hook 'my-c-initialization-hook)

  (add-hook 'c-mode-hook 'tl/setup-c-mode)
  ;; (add-hook 'c-mode-common-hook
  ;;           (lambda ()
  ;;             (when (derived-mode-p 'c-mode 'c++-mode )
  ;;               (smartparens-mode 1)
  ;;               (hl-line-mode 1)
  ;;               (clean-aindent-mode 1)
  ;;               (dtrt-indent-mode 1)

  ;;               (org-indent-mode -1)
  ;;               (org-roam-mode -1)
  ;;               (ggtags-mode 1))))
  (add-hook 'c-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   '(company-clang  company-gtags  company-c-headers company-dabbrev ))))
  (add-hook 'c-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'whitespace-cleanup)))
  )


#+END_SRC

#+RESULTS:
: consult-yank

** Lesser languages : R

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'ess
  ;; (setq-default inferior-R-program-name "/home/user/R")

  (setq-default inferior-ess-r-program  "/home/user/R")
  (setq ess-style 'RStudio)
  (setq ess-use-auto-complete nil)
  (setq ess-use-company t)
  (setq ess-indent-with-fancy-comments nil)
  (setq ess-pdf-viewer-pref 'emacsclient)
  (setq inferior-R-args "--no-restore-history --no-save")
  (setq ess-ask-for-ess-directory nil)
  (setq ess-R-font-lock-keywords
        (quote
         ((ess-R-fl-keyword:modifiers)
          (ess-R-fl-keyword:fun-defs . t)
          (ess-R-fl-keyword:keywords . t)
          (ess-R-fl-keyword:assign-ops . t)
          (ess-R-fl-keyword:constants . t)
          (ess-R-fl-keyword:fun-cals . t)
          (ess-R-fl-keyword:numbers)
          (ess-R-fl-keyword:operators . t)
          (ess-R-fl-keyword:delimiters)
          (ess-R-fl-keyword:=)
          (ess-R-fl-keyword:F&T)))))
#+END_SRC

#+RESULTS:
: ((ess-R-fl-keyword:modifiers) (ess-R-fl-keyword:fun-defs . t) (ess-R-fl-keyword:keywords . t) (ess-R-fl-keyword:assign-ops . t) (ess-R-fl-keyword:constants . t) (ess-R-fl-keyword:fun-cals . t) (ess-R-fl-keyword:numbers) (ess-R-fl-keyword:operators . t) (ess-R-fl-keyword:delimiters) (ess-R-fl-keyword:=) (ess-R-fl-keyword:F&T))

* Eshell

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'eshell
  (require 'esh-mode)
  (require 'esh-module)
  (setq eshell-modules-list             ; It works but may need review
        '(eshell-alias
          eshell-basic
          eshell-cmpl
          eshell-dirs
          eshell-glob
          eshell-hist
          eshell-ls
          eshell-pred
          eshell-prompt
          eshell-script
          eshell-term
          eshell-tramp
          eshell-unix))

  (setenv "PAGER" "cat")
  (setq eshell-scroll-to-bottom-on-input 'all)
  (setq eshell-error-if-no-glob t)
  (setq eshell-hist-ignoredups t)
  (setq eshell-cmpl-cycle-ignore-case t)
  (setq eshell-cmpl-cycle-completions t)
  (setq eshell-save-history-on-exit t)
  (setq eshell-prefer-lisp-functions nil)
  (setq eshell-destroy-buffer-when-process-dies t)

  (add-hook 'eshell-mode

            (lambda ()
              (set (make-local-variable 'company-backends)
                   '(company-files company-capf company-dabbrev ))))
  (defun tl/eshell-quit ()
    (progn
      (eshell-life-is-too-much) ; Why not? (eshell/exit)
      (ignore-errors
        (delete-window))))
  )

(prot-emacs-builtin-package 'em-alias
  (eshell/alias "exit" "tl/eshell-quit")
  (eshell/alias "ll" "/bin/ls -AlohG --color=always")
  (eshell/alias "val" "valgrind --leak-check=yes --show-leak-kinds=all --exit-on-first-error=yes --error-exitcode=1 $*")
  (eshell/alias "d" "dired $1")
  (eshell/alias "gds" "magit-diff-staged")
  (eshell/alias "gd" "magit-diff-unstaged")
  (eshell/alias "ee" "find-file-other-window $1")
  (eshell/alias "emacs" "find-file $1")
  (eshell/alias "ff" "find-file $1")
  (eshell/alias "e" "find-file $1")
  )

(prot-emacs-builtin-package 'tl-eshell


  (let ((map eshell-mode-map))
    (define-key map (kbd "C-c C-r") #'prot-eshell-root-dir))
  (let ((map eshell-hist-mode-map))
    (define-key map (kbd "C-c C-d") #'prot-eshell-complete-recent-dir)
    (define-key map (kbd "C-c C-s") #'prot-eshell-find-subdirectory-recursive)))
#+END_SRC

#+RESULTS:
: prot-eshell-find-subdirectory-recursive

* Tramp

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'tramp
  (with-eval-after-load 'tramp-cache
    (setq tramp-persistency-file-name "~/.emacs.d/tramp"))
  (setq tramp-default-method "ssh")
  (setq tramp-use-ssh-controlmaster-options nil)
  (message "tramp-loaded"))

#+END_SRC

* Magit

I played with this before..

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'magit
  (setq magit-branch-arguments nil)

  ;; use ido to look for branches
  (setq magit-completing-read-function 'magit-builtin-completing-read)
  ;; don't put "origin-" in front of new branch names by default
  (setq magit-default-tracking-name-function 'magit-default-tracking-name-branch-only)
  (setq magit-push-always-verify nil)
  ;; Get rid of the previous advice to go into fullscreen
  (setq magit-restnore-window-configuration t)
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
  (define-key global-map (kbd "C-x g") #'magit-status))
#+END_SRC

* Org-mode
** General setup

load org mode

#+BEGIN_SRC emacs-lisp

(prot-emacs-builtin-package 'org
  (setq org-startup-indented t)
  (setq org-hide-leading-stars t)
  (setq org-odd-level-only t)
  ;; (setq org-indent-mode t)
  (setq org-startup-with-inline-images t)

  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-edit-src-content-indentation t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (setq org-display-inline-images t)

  (setq org-display-inline-images t)
  (setq org-redisplay-inline-images t)
  (setq org-startup-with-inline-images "inlineimages")

  (setq org-refile-use-outline-path 'file)

  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  (setq org-pretty-entities t)
  (setq org-directory "~/work")
  (setq org-log-into-drawer t)
  (setq org-log-done 'time)

  (setq org-todo-keywords '((sequence
                             "TODO(t@/!)"
                             "WAITING(w@/!)"
                             "SOMEDAY(s/!)"
                             "PROG(p)"
                             "|"
                             "DONE(d@)"
                             "CANCEL(c@)"
                             "DELEGATED(@)"
                             )
                            (sequence
                             "IDEA"
                             "GOAL"
                             "|"
                             "DUD(@)")
                            ))
  ;; Add the REPORT drawer
  (setq org-drawers '("PROPERTIES" "CLOCK" "LOGBOOK" "REPORT"))
  (setq org-agenda-files '("~/work"
                           "~/work/roam"
                           "~/work/roam/dailies"
                           "~/life"))
  (setq org-capture-templates
        (quote (("t" "todo" entry (file+headline "~/work/work-todo.org" "Inbox")
                 "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")
                ("n" "note" entry (file+headline "~/work/work-todo.org" "Inbox")
                 "* %?\n\n  %i\n\n  See: %a" :empty-lines 1)
                ("r" "respond" entry (file+headline "~/work/work-todo.org" "Inbox")
                 "* TODO Respond to %:from on %:subject\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")
                ("m" "Mail" entry (file+headline "~/work/work-todo.org" "Inbox")
                 "* TODO %?\n%a   %:from %:fromname %:fromaddress" :prepend t :jump-to-captured t)
                ("p" "Daily Plan" plain (file+datetree "~/planning/daily-plan.org")
                 "+ [ ] The 3 most important tasks [/]
                                  - [ ]
                                  - [ ]
                                  - [ ]
                  + [ ] Other tasks that are in the system [/]
                                  - [ ]
                  + [ ] ToDos which are not tracked by my system [/]
                                  - [ ] " :immediate-finish t)
                )))
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-include-deadlines t)
  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)
  (setq org-habit-show-habits-only-for-today t)
  ;; Org Agenda Files
  ;; org agenda
  (setq org-agenda-time-grid
        (quote
         ((daily today remove-match)
          (700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300)
          "......" "----------------")))
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((agenda "")
            (alltodo "")))))
  (setq org-refile-targets '(("~/work/work-todo.org" :maxlevel . 2)
                             ("~/work/work-todo-archive.org" :maxlevel . 2)
                             ("~/life/life-todo.org" :maxlevel . 2)
                             ))
  (setq org-use-speed-commands t
        org-return-follows-link t
        org-outline-path-complete-in-steps nil)
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("frame" "lines")
          ("linenos=true")
          ("breaklines=true")
          ("framesep=2mm")
          ("fontsize" "\\footnotesize")
          ))
  (define-key global-map (kbd "C-c l") #'org-store-link)
  (define-key global-map (kbd "C-c a") #'org-agenda)
  (define-key global-map (kbd "C-c c") #'org-capture)
  (let ((map org-mode-map))
    (define-key map (kbd "C-c [") #'undefined)
    (define-key map (kbd "C-,") #'undefined)
    (define-key map (kbd "C-,") #'embark-act)
    (define-key map (kbd "C-'") #'undefined)
    (define-key map (kbd "C-y") #'consult-yank))
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook
            (lambda ()
              (org-indent-mode t)))

  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

  (setq org-link-frame-setup
        (quote
         ((vm . vm-visit-folder-other-frame)
          (vm-imap . vm-visit-imap-folder-other-frame)
          (gnus . org-gnus-no-new-news)
          (file . find-file)
          (wl . wl-other-frame))))
  )
#+END_SRC

#+RESULTS:
: ((vm . vm-visit-folder-other-frame) (vm-imap . vm-visit-imap-folder-other-frame) (gnus . org-gnus-no-new-news) (file . find-file) (wl . wl-other-frame))

** Coding

Allow babel to evaluate C ...

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((C . t)
   (R . t)
   (dot . t)
   (emacs-lisp . t)
   (shell . t)
   (awk . t)
   (makefile . t)
   (latex . t)
   (java . t)
   (clojure . t)
   ))

#+END_SRC

Done.
** Export

Export packages...

#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(require 'ox-beamer)
#+END_SRC

** Bullets

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'org-superstar
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  )

#+END_SRC

** Image preview

Inline images support:

# #+BEGIN_SRC emacs-lisp
# (setq org-latex-create-formula-image-program 'imagemagick)

# (add-to-list 'org-latex-packages-alist
#              '("" "tikz" t))

# (eval-after-load "preview"
#   '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
# (setq org-latex-create-formula-image-program 'imagemagick)


# (setq org-confirm-babel-evaluate nil)
# (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
# (add-hook 'org-mode-hook 'org-display-inline-images)
# #+END_SRC

** Keybindings

Quickly open index file
#+BEGIN_SRC emacs-lisp
(defun open-index-file ()
  "Open the master org TODO list."
  (interactive)
  (find-file "~/work/work-todo.org")
  (flycheck-mode -1)
  (end-of-buffer))

(global-set-key (kbd "C-c i") 'open-index-file)
#+END_SRC

** Deft

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'deft

  (setq deft-default-extension "org")
  ;; de-couples filename and note title:
  (setq deft-use-filename-as-title nil)
  (setq deft-use-filter-string-for-filename t)
  ;; disable auto-save
  (setq deft-auto-save-interval -1.0)
  ;; converts the filter string into a readable file-name using kebab-case:
  (setq deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  (setq deft-directory (concat (getenv "HOME") "/work/roam/"))
  (add-to-list 'deft-extensions "tex"))

#+END_SRC

NOTE: in Emacs 27.1 the cl package has been deprecated. Therefore deft throws an error when called. To fix this find all =(require 'cl)= statements and replace with =(require 'cl-lib)=. E.g. by running =rg -F "(require 'cl)" -l=.

** Helm-bibtex

Define format for bibtex entries

#+BEGIN_SRC emacs-lisp

;; variables that control bibtex key format for auto-generation
;; I want firstauthor-year-title-words
;; this usually makes a legitimate filename to store pdfs under.
(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)

(setq bibtex-completion-bibliography "~/work/bibliography/references.bib"
      bibtex-completion-library-path "~/work/bibliography/bibtex-pdfs"
      bibtex-completion-notes-path "~/work/bibliography/helm-bibtex-notes"
      bibtex-completion-pdf-field "file")

#+END_SRC

** Org-ref

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'biblio)
(prot-emacs-elpa-package 'biblio-core)
(prot-emacs-elpa-package 'org-ref


  ;; (setq org-ref-completion-library 'org-ref-ivy-cite)
  (setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex)
  (setq org-ref-default-bibliography '("~/work/bibliography/references.bib"))
  (setq org-ref-bibliography-notes "~/work/roam/notes.org")
  (setq org-ref-pdf-directory "~/work/bibliography/bibtex-pdfs/")
  ;; (setq  notes-directory (concat (getenv "HOME") "/work/roam/"))
  (setq org-ref-notes-directory "~/work/roam/")
  (setq org-ref-notes-function 'orb-edit-notes)
  (setq org-ref-default-citation-link "supercite")

  (setq reftex-default-bibliography '("~/work/bibliography/references.bib")))

#+END_SRC

#+RESULTS:
| ~/work/bibliography/references.bib |

Make =supercite= the default citation type:

Where are the refs?

End.

** Org roam

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'org-roam

  ;; (setq org-roam-directory "~/work/roam/")
  (setq org-roam-directory (concat (getenv "HOME") "/work/roam/"))
  (setq org-roam-index-file "~/work/roam/Index.org")
  (setq org-roam-db-location "~/work/roam/org-roam.db")
  (setq org-roam-completion-everywhere t)
  (add-hook 'after-init-hook 'org-roam-mode)
  (let ((map org-roam-mode-map))
    (define-key map (kbd "C-c m l") #'org-roam)
    (define-key map (kbd "C-c m F") #'org-roam-find-file)
    (define-key map (kbd "C-c m r") #'org-roam-find-ref)
    (define-key map (kbd "C-c m t") #'org-roam-tag-add)
    (define-key map (kbd "C-c m .") #'org-roam-find-directory)
    (define-key map (kbd "C-c m d") #'org-roam-dailies-today)
    (define-key map (kbd "C-c m j") #'org-roam-jump-to-index)
    (define-key map (kbd "C-c m b") #'org-roam-switch-to-buffer)
    (define-key map (kbd "C-c m g") #'org-roam-graph)
    (define-key map (kbd "C-c m G") #'org-roam-server-mode))

  (let ((map org-mode-map))
    (define-key map (kbd "C-c m i") #'org-roam-insert)
    (define-key map (kbd "C-c n a") #'orb-note-actions))



  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam-capture--get-point)
           "\n* %?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}\n#+created: %u\n#+last_modified: %U\n\n"
           :unnarrowed t)
          ("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "${slug}"
           :head "#+title: ${title}\n#+roam_key: ${ref}\n#+created: %u\n#+last_modified: %U\n\n"
           :unnarrowed t)
          ("d" "Daily" plain (function org-roam-capture--get-point)
           "* %?\n"
           :add-created t
           :file-name "dailies/%<%Y-%m-%d>-${slug}"
           :head "#+TITLE: %<%Y-%m-%d>\n\n"
           :unnarrowed t))))

#+END_SRC

#+RESULTS:
| d | default | plain | #'org-roam-capture--get-point |

Org Roam protocol

#+BEGIN_SRC emacs-lisp

(require 'org-roam-protocol)
(prot-emacs-elpa-package 'org-roam-server

  (setq org-roam-server-host "127.0.0.1")
  (setq org-roam-server-port 8080)
  (setq org-roam-server-export-inline-images t)
  (setq org-roam-server-authenticate nil)
  (setq org-roam-server-network-poll t)
  (setq org-roam-server-network-arrows nil)
  (setq org-roam-server-network-label-truncate t)
  (setq org-roam-server-network-label-truncate-length 60)
  (setq org-roam-server-network-label-wrap-length 20))
#+END_SRC

Additional setup:

We need to create a file in =~/.local/share/applications/org-protocol.desktop=
#+begin_example
[Desktop Entry]
Name=Org-Protocol
Exec=emacsclient %u
Icon=emacs-icon
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol
#+end_example

and run :
#+begin_example bash
xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_example

** Org-roam-bibtex
#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'ivy-bibtex)

(prot-emacs-elpa-package 'org-roam-bibtex
  (setq orb-preformat-keywords
        '(("citekey" . "=key=") "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "%<%Y%m%d%H%M%S>-${citekey}"
           :head "#+TITLE: ${citekey}: ${title}
,#+ROAM_KEY: ${ref}
,#+roam_tags:
\n* ${title}
:PROPERTIES:
:Custom_ID: ${citekey}
:URL: ${url}
:AUTHOR: ${author-or-editor}
:NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")
:NOTER_PAGE:
:END:\n%?")))
  (add-hook 'org-roam-mode 'org-roam-bibtex-mode))
#+END_SRC

#+RESULTS:
| org-roam-bibtex-mode | t |

** Org-Noter
supercite:ma-2018-pan-cancer

#+BEGIN_SRC  emacs-lisp

(prot-emacs-elpa-package 'org-noter

  (setq org-noter-hide-other t)
  (setq org-noter-auto-save-last-location t)
  (setq org-noter-doc-split-fraction '(0.67 0.33))
  (setq org-noter-notes-search-path  (list (concat (getenv "HOME") "/work/roam/"))))


#+END_SRC

#+RESULTS:
| /home/user/work/roam/ |

** Calendar

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'calfw )
(prot-emacs-elpa-package 'calfw-org)
;; (defalias 'ca 'cfw:open-org-calendar)
#+END_SRC

#+RESULTS:

Call calendar like this: cfw:open-org-calendar

** Latex templates
Latex templates
#+BEGIN_SRC emacs-lisp
;;(setq org-latex-to-pdf-process '("xelatex %f && bibtex %f && xelatex %f && xelatex %f"))
(defun sk-latexmk-cmd (backend)
  "When exporting from .org with latex, automatically run latex,
                                                        pdflatex, or xelatex as appropriate, using latexmk."
  (when (org-export-derived-backend-p backend 'latex)
    (let ((texcmd)))
    ;; default command: xelatex
    (setq texcmd "jobname=$(basename %f | sed 's/\.tex//');latexmk -xelatex -shell-escape -quiet %f && mkdir -p latex.d && mv ${jobname}.* latex.d/. && mv latex.d/${jobname}.{org,pdf,fdb_latexmk,aux} .")
    ;; pdflatex -> .pdf
    (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
        (setq texcmd "latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -pdf -bibtex -f %f"))

    (if (string-match "LATEX_CMD: singularity" (buffer-string))
        (setq texcmd "singularity run --containall --bind $HOME/work/bibliography:$HOME/work/bibliography  --bind $PWD:/mnt --pwd /mnt   latex.sif   latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -pdf -bibtex -f %f"))
    ;; xelatex -> .pdf
    (if (string-match "LATEX_CMD: xelatex" (buffer-string))
        (setq texcmd "latexmk -pdflatex='xelatex -shell-escape -interaction nonstopmode' -pdf -bibtex -f  %f"))
    ;; LaTeX compilation command
    (setq org-latex-pdf-process (list texcmd))))

(org-add-hook 'org-export-before-processing-hook 'sk-latexmk-cmd)

(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
#+END_SRC

** CV

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("CV"
               "\\documentclass[11pt]{article}
                                                        \\usepackage{\\string~\"/.emacs.d/latex_templates/cv\"}
                                                        [NO-DEFAULT-PACKAGES]
                                                        [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

** NHMRC project grant

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("NHMRC_project_grant"
               "\\documentclass[12pt,table,names]{article}
                \\usepackage{\\string~\"/.emacs.d/latex_templates/NHMRC_grant\"}
                [NO-DEFAULT-PACKAGES]
                [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
Rebuttal...
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("NHMRC_project_grant_rebuttal"
               "\\documentclass[12pt,table,names]{article}
                                \\usepackage{\\string~\"/.emacs.d/latex_templates/NHMRC_grant\"}
                                [NO-DEFAULT-PACKAGES]
                                [NO-PACKAGES]"
               ("\\subsection{%s}" . "\\section*{%s}")
               ("\\subsubsection{%s}" . "\\subsection*{%s}")q
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

#+END_SRC

** NHMRC Investigator

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("NHMRC_investigator_grant"
               "\\documentclass[12pt,table,names]{article}
                \\usepackage{\\string~\"/.emacs.d/latex_templates/NHMRC_investigator\"}
                [NO-DEFAULT-PACKAGES]
                [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

** ARC Discovery Grant

Main grant
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("ARC_discovery_grant"
               "\\documentclass[12pt]{article}
                \\usepackage{\\string~\"/.emacs.d/latex_templates/ARC_discovery\"}
                [NO-DEFAULT-PACKAGES]
                [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")))
#+END_SRC

Special formatting for the ROPE sections.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("ARC_ROPE"
               "\\documentclass[12pt]{article}
                \\usepackage{\\string~\"/.emacs.d/latex_templates/ARC_discovery_ROPE\"}
                [NO-DEFAULT-PACKAGES]
                [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")))
#+END_SRC

** Nature style paper

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes '("naturedef"
                                  "\\documentclass[fleqn,10pt]{wlscirep}
                        [NO-DEFAULT-PACKAGES]
                        [PACKAGES]
                        [EXTRA]"
                                  ("\\section{%s}" . "\\section*{%s}")
                                  ("\\subsection{%s}" . "\\subsection*{%s}")
                                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("nature"
               "\\documentclass[12pt]{article}
                                                        \\usepackage{\\string~\"/.emacs.d/latex_templates/nature\"}
                                                        [NO-DEFAULT-PACKAGES]
                                                        [NO-PACKAGES]"
               ("\\section*{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

** Bioinformatics paper

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes '("bioinfo"
                                  "\\documentclass{bioinfo}
                        [NO-DEFAULT-PACKAGES]
                        [PACKAGES]
                        [EXTRA]"

                                  ("\\section{%s}" . "\\section*{%s}")
                                  ("\\subsection{%s}" . "\\subsection*{%s}")
                                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

** Internal report

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("report"
               "\\documentclass[12pt]{article}
        \\usepackage{\\string~\"/.emacs.d/latex_templates/report\"}
[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

** RoamCard
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("roamcard"
               "\\documentclass[12pt,notitlepage]{article}
                \\usepackage{\\string~\"/.emacs.d/latex_templates/roamcard\"}
                [NO-DEFAULT-PACKAGES]
                [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

** Simple presentation

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             `("simplepresentation"
               ,(concat "\\documentclass[presentation]{beamer}\n"
                        "\\usepackage{\\string~\"/.emacs.d/latex_templates/simple\"}"
                        "[DEFAULT-PACKAGES]"
                        "[PACKAGES]"
                        "[EXTRA]\n")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("smallscreen"
               "\\documentclass[aspectratio=169,18pt,t]{beamer}
                \\usepackage{\\string~\"/.emacs.d/latex_templates/smallscreen\"}
                [NO-DEFAULT-PACKAGES]
                [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}"
                "\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}")))
#+END_SRC

** Fancier presentation

#+BEGIN_SRC emacs-lisp

(add-to-list 'org-latex-classes
             '("modernpresentation"
               "\\documentclass[14pt]{beamer}
                                                \\usepackage{\\string~\"/.emacs.d/latex_templates/modern\"}
                                                [NO-DEFAULT-PACKAGES]
                                                [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}")))

#+END_SRC

* Writing tools
** Flyspell

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'flyspell
  (setq flyspell-issue-message-flag nil)
  (setq flyspell-issue-welcome-flag nil)
  (setq ispell-program-name "aspell")
  (setq ispell-dictionary "en_GB")
  (define-key flyspell-mode-map (kbd "C-,") nil)
  (define-key flyspell-mode-map (kbd "C-.") nil))
#+END_SRC

#+RESULTS:

** Proselint

Important commands:

#+begin_example emacs-lisp
flymake-mode
flymake-start

flymake-show-diagnostic-buffer
#+end_example


#+BEGIN_SRC emacs-lisp

(prot-emacs-builtin-package 'flymake
  (setq flymake-fringe-indicator-position 'left-fringe)
  (setq flymake-suppress-zero-counters t)
  (setq flymake-start-on-flymake-mode t)
  (setq flymake-no-changes-timeout nil)
  (setq flymake-start-on-save-buffer t)
  (setq flymake-proc-compilation-prevents-syntax-check t)
  (setq flymake-wrap-around nil)

  (let ((map flymake-mode-map))
    (define-key map (kbd "C-c ! s") #'flymake-start)
    (define-key map (kbd "C-c ! d") #'flymake-show-diagnostics-buffer)
    (define-key map (kbd "C-c ! n") #'flymake-goto-next-error)
    (define-key map (kbd "C-c ! p") #'flymake-goto-prev-error)))

(prot-emacs-elpa-package 'flymake-diagnostic-at-point
  (setq flymake-diagnostic-at-point-display-diagnostic-function
        'flymake-diagnostic-at-point-display-minibuffer))

(prot-emacs-elpa-package 'flymake-proselint
  (add-hook 'markdown-mode-hook #'flymake-proselint-setup)
  (add-hook 'org-mode-hook #'flymake-proselint-setup)
  (add-hook 'text-mode-hook #'flymake-proselint-setup))
#+END_SRC

** Langtool

#+BEGIN_SRC emacs-lisp
(prot-emacs-elpa-package 'langtool
  (setq langtool-language-tool-jar "/home/user/programs/langtool/LanguageTool-4.0/languagetool-commandline.jar")
  )
#+END_SRC

#+RESULTS:
: /home/user/programs/langtool/LanguageTool-4.0/languagetool-commandline.jar

* Reading
** Olivetti
#+BEGIN_SRC emacs-lisp

(prot-emacs-elpa-package 'olivetti

  (setq olivetti-body-width 0.9)
  (setq olivetti-minimum-body-width 80)
  (setq olivetti-recall-visual-line-mode-entry-state t)
  (define-minor-mode prot/mode-line-hidden-mode
    "Toggle modeline visibility in the current buffer."
    :init-value nil
    :global nil
    (if prot/mode-line-hidden-mode
        (setq-local mode-line-format nil)
      (kill-local-variable 'mode-line-format)
      (force-mode-line-update)))

  (define-minor-mode tl/mode-hlline-hidden-mode
    "Toggle modeline visibility in the current buffer."
    :init-value nil
    :global nil
    (if tl/mode-hlline-hidden-mode
        (setq-local global-hl-line-mode nil)
      (setq-local global-hl-line-mode 1)))

  (define-minor-mode prot/cursor-type-mode
    "Toggle between static block and pulsing bar cursor."
    :init-value nil
    :global t
    (if prot/cursor-type-mode
        (progn
          (setq-local blink-cursor-interval 0.75
                      cursor-type '(bar . 2)
                      cursor-in-non-selected-windows 'hollow)
          (blink-cursor-mode 1))
      (dolist (local '(blink-cursor-interval
                       cursor-type
                       cursor-in-non-selected-windows))
        (kill-local-variable `,local))
      (blink-cursor-mode -1)))

  (define-minor-mode prot/variable-pitch-mode
    "Toggle `variable-pitch-mode', except for `prog-mode'."
    :init-value nil
    :global nil
    (if prot/variable-pitch-mode
        (unless (derived-mode-p 'prog-mode)
          (variable-pitch-mode 1))
      (variable-pitch-mode -1)))

  (define-minor-mode prot/olivetti-mode
    "Toggle buffer-local `olivetti-mode' with additional parameters.

      Fringes are disabled.  The modeline is hidden, except for
      `prog-mode' buffers (see `prot/mode-line-hidden-mode').  The
      default typeface is set to a proportionately spaced family,
      except for programming modes (see `prot/variable-pitch-mode').
      The cursor becomes a blinking bar, per `prot/cursor-type-mode'."
    :init-value nil
    :global nil
    (if prot/olivetti-mode
        (progn
          (olivetti-mode 1)
          (tl/mode-hlline-hidden-mode 1)
          (set-window-fringes (selected-window) 0 0)
          (prot/variable-pitch-mode 1)
          (prot/cursor-type-mode 1)
          (unless (derived-mode-p 'prog-mode)
            (prot/mode-line-hidden-mode 1)))
      (olivetti-mode -1)
      (tl/mode-hlline-hidden-mode -1)
      (set-window-fringes (selected-window) nil) ; Use default width
      (prot/variable-pitch-mode -1)
      (prot/cursor-type-mode -1)
      (unless (derived-mode-p 'prog-mode)
        (prot/mode-line-hidden-mode -1))))

  (define-key global-map (kbd "C-c o") #'prot/olivetti-mode)
  )
#+END_SRC

#+RESULTS:
: prot/olivetti-mode

* Server mode

#+BEGIN_SRC emacs-lisp
(prot-emacs-builtin-package 'server
  (add-hook 'after-init-hook #'server-start))
#+END_SRC


#+BEGIN_SRC emacs-lisp

;; (prot-emacs-builtin-package 'desktop
;;   (setq desktop-auto-save-timeout 300)
;;   (setq desktop-path `(,user-emacs-directory))
;;   (setq desktop-base-file-name "desktop")
;;   (setq desktop-files-not-to-save nil)
;;   (setq desktop-globals-to-clear nil)
;;   (setq desktop-load-locked-desktop t)
;;   (setq desktop-missing-file-warning nil)
;;   (setq desktop-restore-eager 0)
;;   (setq desktop-restore-frames nil)
;;   (setq desktop-save 'ask-if-new)
;;   (dolist (symbol '(kill-ring log-edit-comment-ring))
;;     (add-to-list 'desktop-globals-to-save symbol))

;;   (desktop-save-mode 1))

#+END_SRC

* PDF tools

#+BEGIN_SRC emacs-lisp

(prot-emacs-elpa-package 'pdf-tools
  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; use normal isearch
  (let ((map pdf-view-mode-map))
    (define-key map (kbd "C-s") #'isearch-forward)))

(pdf-tools-install)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp

(prot-emacs-elpa-package 'org-pdftools
  :config
  ;; https://lists.gnu.org/archive/html/emacs-orgmode/2016-11/msg00169.html
  ;; Before adding, remove it (to avoid clogging)
  (delete '("\\.pdf\\'" . default) org-file-apps)
  ;; https://lists.gnu.org/archive/html/emacs-orgmode/2016-11/msg00176.html
  (add-to-list 'org-file-apps
               '("\\.pdf\\'" . (lambda (file link)
                                 (org-pdftools-open link)))))
#+END_SRC

#+RESULTS:
: ((\.pdf\' lambda (file link) (org-pdftools-open link)) (auto-mode . emacs) (directory . emacs) (\.mm\' . default) (\.x?html?\' . default))


Run this afterwards :
(pdf-tools-install)


The end.
