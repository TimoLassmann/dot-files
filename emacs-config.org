#+TITLE:  My emacs config
#+AUTHOR: Timo Lassmann
#+DATE:   2021-04-17
#+LATEX_CLASS: report
#+OPTIONS:  toc:nil
#+OPTIONS: H:4
#+LATEX_CMD: pdflatex
#+PROPERTY: header-args:emacs-lisp :exports code :results none 
* Introduction 

  All my emacs config.
* Basic settings
** Directory paths

   #+BEGIN_SRC emacs-lisp
     (defconst tl/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))
     (defun tl/emacs-subdirectory (d) (expand-file-name d tl/emacs-directory))
   #+END_SRC

** Whoami

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Timo Lassmann"
	   user-mail-address "timo.lassmann@telethonkids.org.au")
   #+END_SRC


** Settings 
   #+BEGIN_SRC emacs-lisp

     (defalias 'yes-or-no-p 'y-or-n-p)

     (setq ring-bell-function 'ignore)

     (setq-default cursor-type 'box)
     (setq-default cursor-in-non-selected-windows '(bar . 2))
     (setq-default blink-cursor-blinks 50)
     (setq-default blink-cursor-interval nil) ; 0.75 would be my choice
     (setq-default blink-cursor-delay 0.2)

     (blink-cursor-mode -1)

   #+END_SRC
  
** Bidirectional writing and so-long.el
   (from prot)
   #+BEGIN_SRC emacs-lisp

     (setq-default bidi-paragraph-direction 'left-to-right)
     (setq bidi-inhibit-bpa t)
     (require 'so-long)
     (global-so-long-mode 1)
   #+END_SRC


** No easy keys
   

   #+BEGIN_SRC emacs-lisp
     (prot-emacs-builtin-package 'no-easy-keys
       (no-easy-keys 1)
       )
   #+END_SRC

** Kill buffer
   Assume that I always want to kill the current buffer when hitting C-x k.
   #+BEGIN_SRC emacs-lisp
     (defun tl/kill-current-buffer ()
       "Kill the current buffer without prompting."
       (interactive)
       (kill-buffer (current-buffer)))
     (global-set-key (kbd "C-x k") 'tl/kill-current-buffer)
   #+END_SRC


** Turn off some default key-bindings
   I keep hitting this by accidental
   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-z"))
     (global-unset-key (kbd "C-x C-z"))
     (global-unset-key (kbd "C-h h"))
     (global-unset-key (kbd "C-x C-c"))


     (defun tl/quit-emacs ()
       "Kill the current buffer without prompting."
       (interactive)
       (save-buffers-kill-terminal))

   #+END_SRC


** Tabs vs spaces
    
   Never use tabs. Tabs are the devil’s whitespace.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 4)
     ;; (setq-default tab-always-indent 'complete)
   #+END_SRC
** Common functions

   #+BEGIN_SRC emacs-lisp
     (prot-emacs-builtin-package 'tl-common
       (global-set-key [remap move-beginning-of-line] 'smarter-move-beginning-of-line)
       (global-set-key [remap org-beginning-of-line]  'smarter-move-beginning-of-line)


       (define-key global-map (kbd "C-x 3") #'split-and-follow-vertically)
       (define-key global-map (kbd "C-x 2") #'split-and-follow-horizontally)
       )
   #+END_SRC

* Main looks

** My simple theme
  
   #+BEGIN_SRC emacs-lisp
     (prot-emacs-builtin-package 'simple-theme
       (simple-theme-load-theme)
       )
   #+END_SRC

** Fonts

   #+BEGIN_SRC emacs-lisp
     (prot-emacs-builtin-package 'tl-fonts
       (tl/setup-fonts)
       )
   #+END_SRC

* Convenience
** Undo Tree
   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'undo-tree
       (global-undo-tree-mode 1))
       
   #+END_SRC

** which-key 
   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'which-key
       ;; NOTE: I only use this for `embark' and `consult' and for the sake
       ;; of producing more user-friendly video demonstrations.
       (setq which-key-dont-use-unicode t)
       (setq which-key-add-column-padding 2)
       (setq which-key-show-early-on-C-h nil)
       (setq which-key-idle-delay most-positive-fixnum) ; set this to something like 0.8
       (setq which-key-idle-secondary-delay 0.05)
       (setq which-key-popup-type 'side-window)
       (setq which-key-show-prefix 'echo)
       (setq which-key-max-display-columns 3)  
       (setq which-key-separator "  ")
       (setq which-key-special-keys nil)
       (setq which-key-paging-key "<next>")
       (which-key-mode))	   ; and turn this on, if you want to use this
   #+END_SRC


** saveplace

   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'saveplace
       (save-place-mode))
   #+END_SRC

** recentf
   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'recentf
       (setq recentf-save-file "~/.emacs.d/recentf")
       (setq recentf-max-menu-items 10)
       (setq recentf-max-saved-items 200)
       (setq recentf-show-file-shortcuts-flag nil)
       (add-to-list 'recentf-exclude
                    (expand-file-name "~/.emacs.d/company-statistics-cache.el"))
       (recentf-mode 1)
       )
   #+END_SRC
   
* Moving
** Switch windows


   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'switch-window
       (setq switch-window-input-style 'minibuffer)
       (setq switch-window-increase 4)
       (setq switch-window-threshold 2)
       (setq switch-window-shortcut-style 'qwerty)
       (setq switch-window-qwerty-shortcuts
	     '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
       (global-set-key [remap other-window]  'switch-window))

   #+END_SRC


* Completion

** Company
   
   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'company
       (setq company-auto-complete nil)
       (setq company-dabbrev-code-everywhere t)
       (setq company-dabbrev-code-modes t)
       (setq company-dabbrev-code-other-buffers 'all)
       (setq company-dabbrev-downcase nil)
       (setq company-dabbrev-ignore-case t)
       (setq company-dabbrev-other-buffers 'all)
       (setq company-idle-delay 0.3)
       (setq company-minimum-prefix-length 3)
       (setq company-require-match nil)
       (setq company-selection-wrap-around t)
       (setq company-show-numbers t)
       (setq company-tooltip-align-annotations t)
       (setq company-tooltip-limit 10)
       (setq company-tooltip-margin 1)
       (setq company-tooltip-offset-display 'scrollbar)
       (add-to-list 'company-backends '(company-clang
                                        company-capf
                                        company-dabbrev
                                        company-c-headers
                                        company-gtags))
       (let ((map company-mode-map))
         (define-key map (kbd "M-/") #'company-manual-begin))
       (let ((map company-active-map))
         (define-key map (kbd "M-/") #'company-other-backend)
         (define-key map (kbd "<tab>") #'company-complete-selection)
         (define-key map (kbd "<C-tab>") #'company-complete-common-or-cycle)
         (define-key map (kbd "C-n") #'company-select-next)
         (define-key map (kbd "C-p") #'company-select-previous))
  
       (setq company-global-modes '(
                                    org-mode
                                    c-mode
                                    c++-mode
                                    ))

       (add-hook 'c-mode-hook
                 (lambda ()
                   (set (make-local-variable 'company-backends) '(company-clang  company-gtags  company-c-headers company-dabbrev ))))

       (global-company-mode 1)
       )
   #+END_SRC
   
   Company C headers

   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'company-c-headers
       )
   #+END_SRC
   Company Statistics 
   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'company-statistics
       (company-statistics-mode)
       )
   #+END_SRC
   
   I had to add the hook and local variable to stop company from selecting capf before clang.
   To make this work properly, I need to manually specify the include paths by
   putting a =.dir-locals.el= into the source directory of my C code. I.e. most
   of the time this will be =src= and I need to point to
   =../tldevel=.

   In addition add the include path to flycheck-clang!

   #+BEGIN_EXAMPLE emacs-lisp
   (
   (c-mode . ((company-clang-arguments . ("-I."  "-I../tldevel-1.2.8/"))))
   (c-mode . ((company-c-headers-path-user . ("." "../tldevel-1.2.8/"))))
   (c-mode . ((flycheck-clang-include-path . ("-I." "-I../tldevel-1.2.8/"))))
   )


   #+END_EXAMPLE

** Consult

   #+BEGIN_SRC emacs-lisp
        (prot-emacs-elpa-package 'consult

     (setq consult-ripgrep-command "rg -SHn --no-heading --color never --no-follow --hidden %s")
          (define-key global-map (kbd "M-s r") #'consult-git-grep)
          (define-key global-map (kbd "C-x b") #'consult-buffer)
          (define-key global-map (kbd "C-x C-r") #'consult-recent-file)
          (define-key global-map (kbd "M-g M-g") #'consult-goto-line)
          )
   #+END_SRC
   
   
** Orderless
   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'orderless
       (setq completion-styles '(orderless))
       (setq orderless-component-separator 'orderless-escapable-split-on-space))     
   #+END_SRC


** Marginalia
   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'marginalia
       (setq marginalia-annotators
             '(marginalia-annotators-heavy
               marginalia-annotators-light))
       (let ((map minibuffer-local-map))
         (define-key map (kbd "M-Y") #'marginalia-cycle))
       (marginalia-mode))      
   #+END_SRC


** Icomplete vertical 

   #+BEGIN_SRC emacs-lisp
          ;; (prot-emacs-elpa-package 'icomplete

          ;;   (let ((map icomplete-minibuffer-map))

          ;;     (define-key map (kbd "<down>") #'icomplete-forward-completions)
          ;;     (define-key map (kbd "C-n") #'icomplete-forward-completions)
          ;;     (define-key map (kbd "<up>") #'icomplete-backward-completions)
          ;;     (define-key map (kbd "C-p") #'icomplete-backward-completions)
          ;;     (define-key map (kbd "C-v") #'icomplete-vertical-toggle)
          ;;     (define-key map (kbd "C-M-i") #'minibuffer-complete))
          ;;   (setq icomplete-show-matches-on-no-input t)
          ;;   (setq icomplete-prospects-height 1)
          ;;   (setq icomplete-separator " ⋮ ")
          ;;   (setq icomplete-hide-common-prefix nil))

          (prot-emacs-elpa-package 'icomplete-vertical

            (setq completion-styles '(orderless)) 
            (setq completion-category-overrides '((file (styles basic substring))))
            (setq read-file-name-completion-ignore-case t)
            (setq read-buffer-completion-ignore-case t)
            (setq completion-ignore-case t)
            (let ((map icomplete-minibuffer-map))
              (define-key map (kbd "<return>") #'icomplete-force-complete-and-exit)
              (define-key map (kbd "<down>") #'icomplete-forward-completions)
              (define-key map (kbd "C-n") #'icomplete-forward-completions)
              (define-key map (kbd "<up>") #'icomplete-backward-completions)
              (define-key map (kbd "C-p") #'icomplete-backward-completions)
              (define-key map (kbd "C-v") #'icomplete-vertical-toggle)
              (define-key map (kbd "C-M-i") #'minibuffer-complete))
            (icomplete-mode)
            (icomplete-vertical-mode)
            )

   #+END_SRC
            

* Programming

  Some defaul Settings
  
  #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 2)
    (global-subword-mode 1)
    (setq compile-command "make -j 6")
    (setq compilation-scroll-output 'first-error)
    (setq compilation-always-kill t)
    (setq compilation-disable-input t)
    (setq compilation-scroll-output t)
    (setq compilation-read-command nil)
    (add-hook 'compilation-mode-hook 'visual-line-mode)

    (global-set-key (kbd "<f5>") (lambda ()
                                   (interactive)
                                   (setq-local compilation-read-command nil)
                                   (call-interactively 'compile)))

    (add-hook 'c-mode-hook
              '(lambda()
                 (c-set-style "bsd")
                 ))
  #+END_SRC

** Yasnippet

   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'yasnippet
       (add-to-list 'yas-snippet-dirs (tl/emacs-subdirectory "snippets"))
       (yas-reload-all)
       (yas-global-mode 1))
   #+END_SRC

** Smart comments 


   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'smart-comment
       (define-key global-map (kbd "M-;") #'smart-comment))

   #+END_SRC


** Smart parens

 #+BEGIN_SRC emacs-lisp
   (prot-emacs-elpa-package 'smartparens
     (add-hook 'c-mode-hook 'smartparens-mode)
     (add-hook 'org-mode-hook 'smartparens-mode)
     )
   #+END_SRC

** Smart scan 

   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'smartscan
       (define-key global-map (kbd "M-n") #'smartscan-symbol-go-forward)
       (define-key global-map (kbd "M-p") #'smartscan-symbol-go-backward))
   #+END_SRC

     
** GGtags

   #+BEGIN_SRC emacs-lisp
     (prot-emacs-elpa-package 'ggtags

       (setq ggtags-oversize-limit 104857600)
       (setq ggtags-sort-by-nearness t)
       (setq ggtags-use-idutils t)
       (setq ggtags-use-project-gtagsconf nil)
       (add-hook 'c-mode-common-hook
                 (lambda ()
                   (when (derived-mode-p 'c-mode)
                     (ggtags-mode 1))))

       (let ((map ggtags-navigation-map))
         (define-key map (kbd "M-u") #'ggtags-navigation-previous-file)
         (define-key map (kbd "M-o") #'ggtags-navigation-next-file)
         (define-key map (kbd "M-l") #'ggtags-navigation-visible-mode)
         (define-key map (kbd "M-j") #'ggtags-navigation-visible-mode)
         (define-key map (kbd "M-k") #'next-error)
         (define-key map (kbd "M-i") #'previous-error))

       (define-key global-map (kbd "M-;") #'smart-comment))

   #+END_SRC
   


** Whitespace  

   #+BEGIN_SRC emacs-lisp
     (prot-emacs-builtin-package 'whitespace
       (define-key global-map (kbd "C-c w") #'whitespace-mode)
       (add-hook 'c-mode-hook
                 (lambda () (add-hook 'before-save-hook 'whitespace-cleanup)))
       )
   #+END_SRC

  
